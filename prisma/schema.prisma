generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Balance {
  id               Int       @id @default(autoincrement())
  date             String
  balance          Float
  balancefim       Float?
  lucro            Float?
  cartao           Float?
  dinheiro         Float?
  cartaofimcaixa   Float?
  dinheirofimcaixa Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
}

model Client {
  id        Int        @id @default(autoincrement())
  name      String
  totalDebt Float
  createdAt DateTime   @default(now())
  updatedAt DateTime @updatedAt
  Payment   Payment[]
  Purchase  Purchase[]
}

model DailyReading {
  id        Int      @id @default(autoincrement())
  date      String
  value     Float
  machineId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Machine   Machine  @relation(fields: [machineId], references: [id])
}

model Despesa {
  id           Int      @id @default(autoincrement())
  nomeDespesa  String
  valorDespesa Float?
  descDespesa  String?
  date         DateTime
  DespesaFixa  Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt
}

model Machine {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime? @updatedAt
  DailyReading DailyReading[]
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  date      String
  clientId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  Client    Client   @relation(fields: [clientId], references: [id])
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Int
  unit      String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  value     Int
  valuecusto Int
}

model Purchase {
  id        Int      @id @default(autoincrement())
  product   String
  quantity  Int
  total     Float
  date      String
  clientId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client   @relation(fields: [clientId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id        Int          @id @default(autoincrement())
  name      String       // Nome do funcionário
  position  String?      // Cargo do funcionário (opcional)
  createdAt DateTime     @default(now()) // Data de criação do registro
  points    DailyPoint[] // Relacionamento com os pontos diários
}

model DailyPoint {
  id         Int      @id @default(autoincrement())
  date       DateTime // Data do ponto
  entry      DateTime // Horário de entrada
  exit       DateTime // Horário de saída
  gateOpen   DateTime? // Horário de abertura do portão (opcional)
  employeeId Int      // Relacionamento com o funcionário
  employee   Employee @relation(fields: [employeeId], references: [id])
}